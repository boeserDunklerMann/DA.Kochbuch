// <auto-generated/>
#nullable enable

namespace DA.Kochbuch.Blazor.Client.GraphQLAPIClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeDataResult : global::System.IEquatable<AddRecipeDataResult>, IAddRecipeDataResult
    {
        public AddRecipeDataResult(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe addRecipe)
        {
            AddRecipe = addRecipe;
        }

        /// <summary>
        /// Adds new recipe data.
        /// </summary>
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe AddRecipe { get; }

        public virtual global::System.Boolean Equals(AddRecipeDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddRecipe.Equals(other.AddRecipe));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddRecipeDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddRecipe.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeData_AddRecipe_AddRecipePayload : global::System.IEquatable<AddRecipeData_AddRecipe_AddRecipePayload>, IAddRecipeData_AddRecipe_AddRecipePayload
    {
        public AddRecipeData_AddRecipe_AddRecipePayload(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe_Recipe recipe)
        {
            Recipe = recipe;
        }

        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe_Recipe Recipe { get; }

        public virtual global::System.Boolean Equals(AddRecipeData_AddRecipe_AddRecipePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Recipe.Equals(other.Recipe));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddRecipeData_AddRecipe_AddRecipePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Recipe.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeData_AddRecipe_Recipe_Recipe : global::System.IEquatable<AddRecipeData_AddRecipe_Recipe_Recipe>, IAddRecipeData_AddRecipe_Recipe_Recipe
    {
        public AddRecipeData_AddRecipe_Recipe_Recipe(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(AddRecipeData_AddRecipe_Recipe_Recipe? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddRecipeData_AddRecipe_Recipe_Recipe)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddRecipeDataResult
    {
        /// <summary>
        /// Adds new recipe data.
        /// </summary>
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe AddRecipe { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddRecipeData_AddRecipe
    {
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe_Recipe Recipe { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddRecipeData_AddRecipe_AddRecipePayload : IAddRecipeData_AddRecipe
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddRecipeData_AddRecipe_Recipe
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddRecipeData_AddRecipe_Recipe_Recipe : IAddRecipeData_AddRecipe_Recipe
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsListResult : global::System.IEquatable<FetchUnitsListResult>, IFetchUnitsListResult
    {
        public FetchUnitsListResult(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsList_Units> units)
        {
            Units = units;
        }

        /// <summary>
        /// Gets all units.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsList_Units> Units { get; }

        public virtual global::System.Boolean Equals(FetchUnitsListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Units, other.Units));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchUnitsListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Units_elm in Units)
                {
                    hash ^= 397 * Units_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsList_Units_Unit : global::System.IEquatable<FetchUnitsList_Units_Unit>, IFetchUnitsList_Units_Unit
    {
        public FetchUnitsList_Units_Unit(global::System.Int32 id, global::System.String name, global::System.DateTimeOffset? creationDate, global::System.DateTimeOffset? changeDate, global::System.Boolean deleted)
        {
            Id = id;
            Name = name;
            CreationDate = creationDate;
            ChangeDate = changeDate;
            Deleted = deleted;
        }

        public global::System.Int32 Id { get; }
        public global::System.String Name { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.Boolean Deleted { get; }

        public virtual global::System.Boolean Equals(FetchUnitsList_Units_Unit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && Deleted == other.Deleted;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchUnitsList_Units_Unit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchUnitsListResult
    {
        /// <summary>
        /// Gets all units.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsList_Units> Units { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchUnitsList_Units
    {
        public global::System.Int32 Id { get; }
        public global::System.String Name { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.Boolean Deleted { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchUnitsList_Units_Unit : IFetchUnitsList_Units
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsListResult : global::System.IEquatable<FetchIngredientsListResult>, IFetchIngredientsListResult
    {
        public FetchIngredientsListResult(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsList_Ingredients> ingredients)
        {
            Ingredients = ingredients;
        }

        /// <summary>
        /// Gets all ingredients.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsList_Ingredients> Ingredients { get; }

        public virtual global::System.Boolean Equals(FetchIngredientsListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ingredients, other.Ingredients));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchIngredientsListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Ingredients_elm in Ingredients)
                {
                    hash ^= 397 * Ingredients_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsList_Ingredients_Ingredient : global::System.IEquatable<FetchIngredientsList_Ingredients_Ingredient>, IFetchIngredientsList_Ingredients_Ingredient
    {
        public FetchIngredientsList_Ingredients_Ingredient(global::System.Int32 id, global::System.String name, global::System.DateTimeOffset? creationDate, global::System.Boolean deleted, global::System.DateTimeOffset? changeDate, global::System.Int32? recipeId, global::System.Double amount, global::System.Int32? unitId)
        {
            Id = id;
            Name = name;
            CreationDate = creationDate;
            Deleted = deleted;
            ChangeDate = changeDate;
            RecipeId = recipeId;
            Amount = amount;
            UnitId = unitId;
        }

        public global::System.Int32 Id { get; }
        public global::System.String Name { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.Boolean Deleted { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.Int32? RecipeId { get; }
        public global::System.Double Amount { get; }
        public global::System.Int32? UnitId { get; }

        public virtual global::System.Boolean Equals(FetchIngredientsList_Ingredients_Ingredient? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && RecipeId == other.RecipeId && Amount == other.Amount && UnitId == other.UnitId;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchIngredientsList_Ingredients_Ingredient)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (RecipeId != null)
                {
                    hash ^= 397 * RecipeId.GetHashCode();
                }

                hash ^= 397 * Amount.GetHashCode();
                if (UnitId != null)
                {
                    hash ^= 397 * UnitId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchIngredientsListResult
    {
        /// <summary>
        /// Gets all ingredients.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsList_Ingredients> Ingredients { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchIngredientsList_Ingredients
    {
        public global::System.Int32 Id { get; }
        public global::System.String Name { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.Boolean Deleted { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.Int32? RecipeId { get; }
        public global::System.Double Amount { get; }
        public global::System.Int32? UnitId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchIngredientsList_Ingredients_Ingredient : IFetchIngredientsList_Ingredients
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesListResult : global::System.IEquatable<FetchRecipesListResult>, IFetchRecipesListResult
    {
        public FetchRecipesListResult(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesList_Recipes> recipes)
        {
            Recipes = recipes;
        }

        /// <summary>
        /// Gets all recipes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesList_Recipes> Recipes { get; }

        public virtual global::System.Boolean Equals(FetchRecipesListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Recipes, other.Recipes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchRecipesListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Recipes_elm in Recipes)
                {
                    hash ^= 397 * Recipes_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesList_Recipes_Recipe : global::System.IEquatable<FetchRecipesList_Recipes_Recipe>, IFetchRecipesList_Recipes_Recipe
    {
        public FetchRecipesList_Recipes_Recipe(global::System.Int32 id, global::System.Int32 numberPersons, global::System.String name, global::System.Int32 userId, global::System.String cookInstructon, global::System.DateTimeOffset? changeDate, global::System.DateTimeOffset? creationDate, global::System.Boolean deleted)
        {
            Id = id;
            NumberPersons = numberPersons;
            Name = name;
            UserId = userId;
            CookInstructon = cookInstructon;
            ChangeDate = changeDate;
            CreationDate = creationDate;
            Deleted = deleted;
        }

        public global::System.Int32 Id { get; }
        public global::System.Int32 NumberPersons { get; }
        public global::System.String Name { get; }
        public global::System.Int32 UserId { get; }
        public global::System.String CookInstructon { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.Boolean Deleted { get; }

        public virtual global::System.Boolean Equals(FetchRecipesList_Recipes_Recipe? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && NumberPersons == other.NumberPersons && Name.Equals(other.Name) && UserId == other.UserId && CookInstructon.Equals(other.CookInstructon) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchRecipesList_Recipes_Recipe)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * NumberPersons.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * UserId.GetHashCode();
                hash ^= 397 * CookInstructon.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchRecipesListResult
    {
        /// <summary>
        /// Gets all recipes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesList_Recipes> Recipes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchRecipesList_Recipes
    {
        public global::System.Int32 Id { get; }
        public global::System.Int32 NumberPersons { get; }
        public global::System.String Name { get; }
        public global::System.Int32 UserId { get; }
        public global::System.String CookInstructon { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.Boolean Deleted { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchRecipesList_Recipes_Recipe : IFetchRecipesList_Recipes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class RecipeInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ingredientInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _recipeImageInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _userInputFormatter = default !;
        public global::System.String TypeName => "RecipeInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _ingredientInputFormatter = serializerResolver.GetInputValueFormatter("IngredientInput");
            _recipeImageInputFormatter = serializerResolver.GetInputValueFormatter("RecipeImageInput");
            _userInputFormatter = serializerResolver.GetInputValueFormatter("UserInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput;
            var inputInfo = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNumberPersonsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("numberPersons", FormatNumberPersons(input.NumberPersons)));
            }

            if (inputInfo.IsUserIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userId", FormatUserId(input.UserId)));
            }

            if (inputInfo.IsCookInstructonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("cookInstructon", FormatCookInstructon(input.CookInstructon)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsChangeDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changeDate", FormatChangeDate(input.ChangeDate)));
            }

            if (inputInfo.IsCreationDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creationDate", FormatCreationDate(input.CreationDate)));
            }

            if (inputInfo.IsDeletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deleted", FormatDeleted(input.Deleted)));
            }

            if (inputInfo.IsIngredientsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ingredients", FormatIngredients(input.Ingredients)));
            }

            if (inputInfo.IsRecipeImagesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("recipeImages", FormatRecipeImages(input.RecipeImages)));
            }

            if (inputInfo.IsUserSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("user", FormatUser(input.User)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatNumberPersons(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatUserId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatCookInstructon(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatChangeDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreationDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDeleted(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatIngredients(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_ingredientInputFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatRecipeImages(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeImageInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_recipeImageInputFormatter.Format(input_elm));
            }

            return input_list;
        }

        private global::System.Object? FormatUser(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UserInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _userInputFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class RecipeInput : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo, global::System.IEquatable<RecipeInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RecipeInput)obj);
        }

        public virtual global::System.Boolean Equals(RecipeInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && NumberPersons == other.NumberPersons && UserId == other.UserId && CookInstructon.Equals(other.CookInstructon) && Name.Equals(other.Name) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ingredients, other.Ingredients) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(RecipeImages, other.RecipeImages) && User.Equals(other.User);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * NumberPersons.GetHashCode();
                hash ^= 397 * UserId.GetHashCode();
                hash ^= 397 * CookInstructon.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                foreach (var Ingredients_elm in Ingredients)
                {
                    hash ^= 397 * Ingredients_elm.GetHashCode();
                }

                foreach (var RecipeImages_elm in RecipeImages)
                {
                    hash ^= 397 * RecipeImages_elm.GetHashCode();
                }

                hash ^= 397 * User.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.Int32 _value_numberPersons;
        private global::System.Boolean _set_numberPersons;
        private global::System.Int32 _value_userId;
        private global::System.Boolean _set_userId;
        private global::System.String _value_cookInstructon = default !;
        private global::System.Boolean _set_cookInstructon;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.DateTimeOffset? _value_changeDate;
        private global::System.Boolean _set_changeDate;
        private global::System.DateTimeOffset? _value_creationDate;
        private global::System.Boolean _set_creationDate;
        private global::System.Boolean _value_deleted;
        private global::System.Boolean _set_deleted;
        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput> _value_ingredients = default !;
        private global::System.Boolean _set_ingredients;
        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeImageInput> _value_recipeImages = default !;
        private global::System.Boolean _set_recipeImages;
        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UserInput _value_user = default !;
        private global::System.Boolean _set_user;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsIdSet => _set_id;

        public global::System.Int32 NumberPersons
        {
            get => _value_numberPersons;
            set
            {
                _set_numberPersons = true;
                _value_numberPersons = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsNumberPersonsSet => _set_numberPersons;

        public global::System.Int32 UserId
        {
            get => _value_userId;
            set
            {
                _set_userId = true;
                _value_userId = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsUserIdSet => _set_userId;

        public global::System.String CookInstructon
        {
            get => _value_cookInstructon;
            set
            {
                _set_cookInstructon = true;
                _value_cookInstructon = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsCookInstructonSet => _set_cookInstructon;

        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsNameSet => _set_name;

        public global::System.DateTimeOffset? ChangeDate
        {
            get => _value_changeDate;
            set
            {
                _set_changeDate = true;
                _value_changeDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsChangeDateSet => _set_changeDate;

        public global::System.DateTimeOffset? CreationDate
        {
            get => _value_creationDate;
            set
            {
                _set_creationDate = true;
                _value_creationDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsCreationDateSet => _set_creationDate;

        public global::System.Boolean Deleted
        {
            get => _value_deleted;
            set
            {
                _set_deleted = true;
                _value_deleted = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsDeletedSet => _set_deleted;

        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput> Ingredients
        {
            get => _value_ingredients;
            set
            {
                _set_ingredients = true;
                _value_ingredients = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsIngredientsSet => _set_ingredients;

        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeImageInput> RecipeImages
        {
            get => _value_recipeImages;
            set
            {
                _set_recipeImages = true;
                _value_recipeImages = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsRecipeImagesSet => _set_recipeImages;

        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UserInput User
        {
            get => _value_user;
            set
            {
                _set_user = true;
                _value_user = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeInputInfo.IsUserSet => _set_user;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class IngredientInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _recipeInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _unitInputFormatter = default !;
        public global::System.String TypeName => "IngredientInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _recipeInputFormatter = serializerResolver.GetInputValueFormatter("RecipeInput");
            _unitInputFormatter = serializerResolver.GetInputValueFormatter("UnitInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput;
            var inputInfo = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsUnitIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unitId", FormatUnitId(input.UnitId)));
            }

            if (inputInfo.IsRecipeIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("recipeId", FormatRecipeId(input.RecipeId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsChangeDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changeDate", FormatChangeDate(input.ChangeDate)));
            }

            if (inputInfo.IsCreationDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creationDate", FormatCreationDate(input.CreationDate)));
            }

            if (inputInfo.IsDeletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deleted", FormatDeleted(input.Deleted)));
            }

            if (inputInfo.IsRecipeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("recipe", FormatRecipe(input.Recipe)));
            }

            if (inputInfo.IsUnitSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unit", FormatUnit(input.Unit)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatAmount(global::System.Double input)
        {
            return _floatFormatter.Format(input);
        }

        private global::System.Object? FormatUnitId(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRecipeId(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatChangeDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreationDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDeleted(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatRecipe(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _recipeInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUnit(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UnitInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _unitInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class IngredientInput : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo, global::System.IEquatable<IngredientInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((IngredientInput)obj);
        }

        public virtual global::System.Boolean Equals(IngredientInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Amount == other.Amount && UnitId == other.UnitId && RecipeId == other.RecipeId && Name.Equals(other.Name) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted && ((Recipe is null && other.Recipe is null) || Recipe != null && Recipe.Equals(other.Recipe)) && ((Unit is null && other.Unit is null) || Unit != null && Unit.Equals(other.Unit));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                if (UnitId != null)
                {
                    hash ^= 397 * UnitId.GetHashCode();
                }

                if (RecipeId != null)
                {
                    hash ^= 397 * RecipeId.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                if (Recipe != null)
                {
                    hash ^= 397 * Recipe.GetHashCode();
                }

                if (Unit != null)
                {
                    hash ^= 397 * Unit.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.Double _value_amount;
        private global::System.Boolean _set_amount;
        private global::System.Int32? _value_unitId;
        private global::System.Boolean _set_unitId;
        private global::System.Int32? _value_recipeId;
        private global::System.Boolean _set_recipeId;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.DateTimeOffset? _value_changeDate;
        private global::System.Boolean _set_changeDate;
        private global::System.DateTimeOffset? _value_creationDate;
        private global::System.Boolean _set_creationDate;
        private global::System.Boolean _value_deleted;
        private global::System.Boolean _set_deleted;
        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput? _value_recipe;
        private global::System.Boolean _set_recipe;
        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UnitInput? _value_unit;
        private global::System.Boolean _set_unit;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsIdSet => _set_id;

        public global::System.Double Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsAmountSet => _set_amount;

        public global::System.Int32? UnitId
        {
            get => _value_unitId;
            set
            {
                _set_unitId = true;
                _value_unitId = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsUnitIdSet => _set_unitId;

        public global::System.Int32? RecipeId
        {
            get => _value_recipeId;
            set
            {
                _set_recipeId = true;
                _value_recipeId = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsRecipeIdSet => _set_recipeId;

        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsNameSet => _set_name;

        public global::System.DateTimeOffset? ChangeDate
        {
            get => _value_changeDate;
            set
            {
                _set_changeDate = true;
                _value_changeDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsChangeDateSet => _set_changeDate;

        public global::System.DateTimeOffset? CreationDate
        {
            get => _value_creationDate;
            set
            {
                _set_creationDate = true;
                _value_creationDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsCreationDateSet => _set_creationDate;

        public global::System.Boolean Deleted
        {
            get => _value_deleted;
            set
            {
                _set_deleted = true;
                _value_deleted = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsDeletedSet => _set_deleted;

        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput? Recipe
        {
            get => _value_recipe;
            set
            {
                _set_recipe = true;
                _value_recipe = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsRecipeSet => _set_recipe;

        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UnitInput? Unit
        {
            get => _value_unit;
            set
            {
                _set_unit = true;
                _value_unit = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IIngredientInputInfo.IsUnitSet => _set_unit;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class UnitInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ingredientInputFormatter = default !;
        public global::System.String TypeName => "UnitInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _ingredientInputFormatter = serializerResolver.GetInputValueFormatter("IngredientInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UnitInput;
            var inputInfo = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsChangeDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changeDate", FormatChangeDate(input.ChangeDate)));
            }

            if (inputInfo.IsCreationDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creationDate", FormatCreationDate(input.CreationDate)));
            }

            if (inputInfo.IsDeletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deleted", FormatDeleted(input.Deleted)));
            }

            if (inputInfo.IsIngredientsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ingredients", FormatIngredients(input.Ingredients)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatChangeDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreationDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDeleted(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatIngredients(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_ingredientInputFormatter.Format(input_elm));
            }

            return input_list;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class UnitInput : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo, global::System.IEquatable<UnitInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UnitInput)obj);
        }

        public virtual global::System.Boolean Equals(UnitInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ingredients, other.Ingredients);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                foreach (var Ingredients_elm in Ingredients)
                {
                    hash ^= 397 * Ingredients_elm.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.DateTimeOffset? _value_changeDate;
        private global::System.Boolean _set_changeDate;
        private global::System.DateTimeOffset? _value_creationDate;
        private global::System.Boolean _set_creationDate;
        private global::System.Boolean _value_deleted;
        private global::System.Boolean _set_deleted;
        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput> _value_ingredients = default !;
        private global::System.Boolean _set_ingredients;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo.IsIdSet => _set_id;

        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo.IsNameSet => _set_name;

        public global::System.DateTimeOffset? ChangeDate
        {
            get => _value_changeDate;
            set
            {
                _set_changeDate = true;
                _value_changeDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo.IsChangeDateSet => _set_changeDate;

        public global::System.DateTimeOffset? CreationDate
        {
            get => _value_creationDate;
            set
            {
                _set_creationDate = true;
                _value_creationDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo.IsCreationDateSet => _set_creationDate;

        public global::System.Boolean Deleted
        {
            get => _value_deleted;
            set
            {
                _set_deleted = true;
                _value_deleted = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo.IsDeletedSet => _set_deleted;

        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInput> Ingredients
        {
            get => _value_ingredients;
            set
            {
                _set_ingredients = true;
                _value_ingredients = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUnitInputInfo.IsIngredientsSet => _set_ingredients;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class RecipeImageInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _byteFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _recipeInputFormatter = default !;
        public global::System.String TypeName => "RecipeImageInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _byteFormatter = serializerResolver.GetInputValueFormatter("Byte");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _recipeInputFormatter = serializerResolver.GetInputValueFormatter("RecipeInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeImageInput;
            var inputInfo = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsImageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("image", FormatImage(input.Image)));
            }

            if (inputInfo.IsRecipeIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("recipeId", FormatRecipeId(input.RecipeId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsChangeDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changeDate", FormatChangeDate(input.ChangeDate)));
            }

            if (inputInfo.IsCreationDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creationDate", FormatCreationDate(input.CreationDate)));
            }

            if (inputInfo.IsDeletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deleted", FormatDeleted(input.Deleted)));
            }

            if (inputInfo.IsRecipeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("recipe", FormatRecipe(input.Recipe)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatImage(global::System.Collections.Generic.IReadOnlyList<global::System.Byte>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_byteFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatRecipeId(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatChangeDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreationDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDeleted(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatRecipe(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _recipeInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class RecipeImageInput : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo, global::System.IEquatable<RecipeImageInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RecipeImageInput)obj);
        }

        public virtual global::System.Boolean Equals(RecipeImageInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Image, other.Image) && RecipeId == other.RecipeId && Name.Equals(other.Name) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted && ((Recipe is null && other.Recipe is null) || Recipe != null && Recipe.Equals(other.Recipe));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Image != null)
                {
                    foreach (var Image_elm in Image)
                    {
                        hash ^= 397 * Image_elm.GetHashCode();
                    }
                }

                if (RecipeId != null)
                {
                    hash ^= 397 * RecipeId.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                if (Recipe != null)
                {
                    hash ^= 397 * Recipe.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Byte>? _value_image;
        private global::System.Boolean _set_image;
        private global::System.Int32? _value_recipeId;
        private global::System.Boolean _set_recipeId;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.DateTimeOffset? _value_changeDate;
        private global::System.Boolean _set_changeDate;
        private global::System.DateTimeOffset? _value_creationDate;
        private global::System.Boolean _set_creationDate;
        private global::System.Boolean _value_deleted;
        private global::System.Boolean _set_deleted;
        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput? _value_recipe;
        private global::System.Boolean _set_recipe;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsIdSet => _set_id;

        public global::System.Collections.Generic.IReadOnlyList<global::System.Byte>? Image
        {
            get => _value_image;
            set
            {
                _set_image = true;
                _value_image = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsImageSet => _set_image;

        public global::System.Int32? RecipeId
        {
            get => _value_recipeId;
            set
            {
                _set_recipeId = true;
                _value_recipeId = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsRecipeIdSet => _set_recipeId;

        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsNameSet => _set_name;

        public global::System.DateTimeOffset? ChangeDate
        {
            get => _value_changeDate;
            set
            {
                _set_changeDate = true;
                _value_changeDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsChangeDateSet => _set_changeDate;

        public global::System.DateTimeOffset? CreationDate
        {
            get => _value_creationDate;
            set
            {
                _set_creationDate = true;
                _value_creationDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsCreationDateSet => _set_creationDate;

        public global::System.Boolean Deleted
        {
            get => _value_deleted;
            set
            {
                _set_deleted = true;
                _value_deleted = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsDeletedSet => _set_deleted;

        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput? Recipe
        {
            get => _value_recipe;
            set
            {
                _set_recipe = true;
                _value_recipe = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IRecipeImageInputInfo.IsRecipeSet => _set_recipe;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class UserInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _recipeInputFormatter = default !;
        public global::System.String TypeName => "UserInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _dateTimeFormatter = serializerResolver.GetInputValueFormatter("DateTime");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _recipeInputFormatter = serializerResolver.GetInputValueFormatter("RecipeInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UserInput;
            var inputInfo = runtimeValue as global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsGoogleIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("googleId", FormatGoogleId(input.GoogleId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsChangeDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("changeDate", FormatChangeDate(input.ChangeDate)));
            }

            if (inputInfo.IsCreationDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creationDate", FormatCreationDate(input.CreationDate)));
            }

            if (inputInfo.IsDeletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deleted", FormatDeleted(input.Deleted)));
            }

            if (inputInfo.IsRecipesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("recipes", FormatRecipes(input.Recipes)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatGoogleId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatChangeDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreationDate(global::System.DateTimeOffset? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateTimeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDeleted(global::System.Boolean input)
        {
            return _booleanFormatter.Format(input);
        }

        private global::System.Object? FormatRecipes(global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_recipeInputFormatter.Format(input_elm));
            }

            return input_list;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class UserInput : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo, global::System.IEquatable<UserInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserInput)obj);
        }

        public virtual global::System.Boolean Equals(UserInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && GoogleId.Equals(other.GoogleId) && Name.Equals(other.Name) && ((ChangeDate is null && other.ChangeDate is null) || ChangeDate != null && ChangeDate.Equals(other.ChangeDate)) && ((CreationDate is null && other.CreationDate is null) || CreationDate != null && CreationDate.Equals(other.CreationDate)) && Deleted == other.Deleted && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Recipes, other.Recipes);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * GoogleId.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (ChangeDate != null)
                {
                    hash ^= 397 * ChangeDate.GetHashCode();
                }

                if (CreationDate != null)
                {
                    hash ^= 397 * CreationDate.GetHashCode();
                }

                hash ^= 397 * Deleted.GetHashCode();
                foreach (var Recipes_elm in Recipes)
                {
                    hash ^= 397 * Recipes_elm.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_id;
        private global::System.Boolean _set_id;
        private global::System.String _value_googleId = default !;
        private global::System.Boolean _set_googleId;
        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.DateTimeOffset? _value_changeDate;
        private global::System.Boolean _set_changeDate;
        private global::System.DateTimeOffset? _value_creationDate;
        private global::System.Boolean _set_creationDate;
        private global::System.Boolean _value_deleted;
        private global::System.Boolean _set_deleted;
        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput> _value_recipes = default !;
        private global::System.Boolean _set_recipes;
        public global::System.Int32 Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsIdSet => _set_id;

        public global::System.String GoogleId
        {
            get => _value_googleId;
            set
            {
                _set_googleId = true;
                _value_googleId = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsGoogleIdSet => _set_googleId;

        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsNameSet => _set_name;

        public global::System.DateTimeOffset? ChangeDate
        {
            get => _value_changeDate;
            set
            {
                _set_changeDate = true;
                _value_changeDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsChangeDateSet => _set_changeDate;

        public global::System.DateTimeOffset? CreationDate
        {
            get => _value_creationDate;
            set
            {
                _set_creationDate = true;
                _value_creationDate = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsCreationDateSet => _set_creationDate;

        public global::System.Boolean Deleted
        {
            get => _value_deleted;
            set
            {
                _set_deleted = true;
                _value_deleted = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsDeletedSet => _set_deleted;

        public global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput> Recipes
        {
            get => _value_recipes;
            set
            {
                _set_recipes = true;
                _value_recipes = value;
            }
        }

        global::System.Boolean global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IUserInputInfo.IsRecipesSet => _set_recipes;
    }

    /// <summary>
    /// Represents the operation service of the AddRecipeData GraphQL operation
    /// <code>
    /// mutation AddRecipeData($recipeData: RecipeInput!) {
    ///   addRecipe(recipe: $recipeData) {
    ///     __typename
    ///     recipe {
    ///       __typename
    ///       name
    ///       ... on Recipe {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeDataMutationDocument : global::StrawberryShake.IDocument
    {
        private AddRecipeDataMutationDocument()
        {
        }

        public static AddRecipeDataMutationDocument Instance { get; } = new AddRecipeDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x64,
            0x64,
            0x52,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x28,
            0x24,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x3a,
            0x20,
            0x52,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x64,
            0x64,
            0x52,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x28,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "22e79d6b8bdac84e9fdd19005bb37610");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddRecipeData GraphQL operation
    /// <code>
    /// mutation AddRecipeData($recipeData: RecipeInput!) {
    ///   addRecipe(recipe: $recipeData) {
    ///     __typename
    ///     recipe {
    ///       __typename
    ///       name
    ///       ... on Recipe {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeDataMutation : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddRecipeDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _recipeInputFormatter;
        public AddRecipeDataMutation(global::StrawberryShake.IOperationExecutor<IAddRecipeDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _recipeInputFormatter = serializerResolver.GetInputValueFormatter("RecipeInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddRecipeDataResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddRecipeDataResult>> ExecuteAsync(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput recipeData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(recipeData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddRecipeDataResult>> Watch(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput recipeData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(recipeData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput recipeData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("recipeData", FormatRecipeData(recipeData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddRecipeDataMutationDocument.Instance.Hash.Value, name: "AddRecipeData", document: AddRecipeDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatRecipeData(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _recipeInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddRecipeData GraphQL operation
    /// <code>
    /// mutation AddRecipeData($recipeData: RecipeInput!) {
    ///   addRecipe(recipe: $recipeData) {
    ///     __typename
    ///     recipe {
    ///       __typename
    ///       name
    ///       ... on Recipe {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddRecipeDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddRecipeDataResult>> ExecuteAsync(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput recipeData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddRecipeDataResult>> Watch(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInput recipeData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchUnitsList GraphQL operation
    /// <code>
    /// query FetchUnitsList {
    ///   units {
    ///     __typename
    ///     id
    ///     name
    ///     creationDate
    ///     changeDate
    ///     deleted
    ///     ... on Unit {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchUnitsListQueryDocument()
        {
        }

        public static FetchUnitsListQueryDocument Instance { get; } = new FetchUnitsListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x55,
            0x6e,
            0x69,
            0x74,
            0x73,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x6e,
            0x69,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x63,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x64,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x64,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x6e,
            0x69,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "03195a42b4c3ae5a59f00a3a44caa34d");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchUnitsList GraphQL operation
    /// <code>
    /// query FetchUnitsList {
    ///   units {
    ///     __typename
    ///     id
    ///     name
    ///     creationDate
    ///     changeDate
    ///     deleted
    ///     ... on Unit {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsListQuery : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchUnitsListResult> _operationExecutor;
        public FetchUnitsListQuery(global::StrawberryShake.IOperationExecutor<IFetchUnitsListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchUnitsListResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchUnitsListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchUnitsListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchUnitsListQueryDocument.Instance.Hash.Value, name: "FetchUnitsList", document: FetchUnitsListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchUnitsList GraphQL operation
    /// <code>
    /// query FetchUnitsList {
    ///   units {
    ///     __typename
    ///     id
    ///     name
    ///     creationDate
    ///     changeDate
    ///     deleted
    ///     ... on Unit {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchUnitsListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchUnitsListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchUnitsListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchIngredientsList GraphQL operation
    /// <code>
    /// query FetchIngredientsList {
    ///   ingredients {
    ///     __typename
    ///     id
    ///     name
    ///     creationDate
    ///     deleted
    ///     changeDate
    ///     recipeId
    ///     amount
    ///     unitId
    ///     ... on Ingredient {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchIngredientsListQueryDocument()
        {
        }

        public static FetchIngredientsListQueryDocument Instance { get; } = new FetchIngredientsListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x49,
            0x6e,
            0x67,
            0x72,
            0x65,
            0x64,
            0x69,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x6e,
            0x67,
            0x72,
            0x65,
            0x64,
            0x69,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x64,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x64,
            0x20,
            0x63,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x49,
            0x64,
            0x20,
            0x61,
            0x6d,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x75,
            0x6e,
            0x69,
            0x74,
            0x49,
            0x64,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x49,
            0x6e,
            0x67,
            0x72,
            0x65,
            0x64,
            0x69,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "eab8446cc366daf0834e3bb1619bf551");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchIngredientsList GraphQL operation
    /// <code>
    /// query FetchIngredientsList {
    ///   ingredients {
    ///     __typename
    ///     id
    ///     name
    ///     creationDate
    ///     deleted
    ///     changeDate
    ///     recipeId
    ///     amount
    ///     unitId
    ///     ... on Ingredient {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsListQuery : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchIngredientsListResult> _operationExecutor;
        public FetchIngredientsListQuery(global::StrawberryShake.IOperationExecutor<IFetchIngredientsListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchIngredientsListResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchIngredientsListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchIngredientsListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchIngredientsListQueryDocument.Instance.Hash.Value, name: "FetchIngredientsList", document: FetchIngredientsListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchIngredientsList GraphQL operation
    /// <code>
    /// query FetchIngredientsList {
    ///   ingredients {
    ///     __typename
    ///     id
    ///     name
    ///     creationDate
    ///     deleted
    ///     changeDate
    ///     recipeId
    ///     amount
    ///     unitId
    ///     ... on Ingredient {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchIngredientsListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchIngredientsListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchIngredientsListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchRecipesList GraphQL operation
    /// <code>
    /// query FetchRecipesList {
    ///   recipes {
    ///     __typename
    ///     id
    ///     numberPersons
    ///     name
    ///     userId
    ///     cookInstructon
    ///     changeDate
    ///     creationDate
    ///     deleted
    ///     ... on Recipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchRecipesListQueryDocument()
        {
        }

        public static FetchRecipesListQueryDocument Instance { get; } = new FetchRecipesListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x52,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x73,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x75,
            0x6d,
            0x62,
            0x65,
            0x72,
            0x50,
            0x65,
            0x72,
            0x73,
            0x6f,
            0x6e,
            0x73,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x20,
            0x63,
            0x6f,
            0x6f,
            0x6b,
            0x49,
            0x6e,
            0x73,
            0x74,
            0x72,
            0x75,
            0x63,
            0x74,
            0x6f,
            0x6e,
            0x20,
            0x63,
            0x68,
            0x61,
            0x6e,
            0x67,
            0x65,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x63,
            0x72,
            0x65,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x44,
            0x61,
            0x74,
            0x65,
            0x20,
            0x64,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x64,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x63,
            0x69,
            0x70,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4a16536672a0ffffe5759e0daf4d39b0");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchRecipesList GraphQL operation
    /// <code>
    /// query FetchRecipesList {
    ///   recipes {
    ///     __typename
    ///     id
    ///     numberPersons
    ///     name
    ///     userId
    ///     cookInstructon
    ///     changeDate
    ///     creationDate
    ///     deleted
    ///     ... on Recipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesListQuery : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchRecipesListResult> _operationExecutor;
        public FetchRecipesListQuery(global::StrawberryShake.IOperationExecutor<IFetchRecipesListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchRecipesListResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchRecipesListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchRecipesListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchRecipesListQueryDocument.Instance.Hash.Value, name: "FetchRecipesList", document: FetchRecipesListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchRecipesList GraphQL operation
    /// <code>
    /// query FetchRecipesList {
    ///   recipes {
    ///     __typename
    ///     id
    ///     numberPersons
    ///     name
    ///     userId
    ///     cookInstructon
    ///     changeDate
    ///     creationDate
    ///     deleted
    ///     ... on Recipe {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchRecipesListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchRecipesListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchRecipesListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the KochbuchClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class KochbuchClient : global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IKochbuchClient
    {
        private readonly global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation _addRecipeData;
        private readonly global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery _fetchUnitsList;
        private readonly global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery _fetchIngredientsList;
        private readonly global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery _fetchRecipesList;
        public KochbuchClient(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation addRecipeData, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery fetchUnitsList, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery fetchIngredientsList, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery fetchRecipesList)
        {
            _addRecipeData = addRecipeData ?? throw new global::System.ArgumentNullException(nameof(addRecipeData));
            _fetchUnitsList = fetchUnitsList ?? throw new global::System.ArgumentNullException(nameof(fetchUnitsList));
            _fetchIngredientsList = fetchIngredientsList ?? throw new global::System.ArgumentNullException(nameof(fetchIngredientsList));
            _fetchRecipesList = fetchRecipesList ?? throw new global::System.ArgumentNullException(nameof(fetchRecipesList));
        }

        public static global::System.String ClientName => "KochbuchClient";
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation AddRecipeData => _addRecipeData;
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery FetchUnitsList => _fetchUnitsList;
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery FetchIngredientsList => _fetchIngredientsList;
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery FetchRecipesList => _fetchRecipesList;
    }

    /// <summary>
    /// Represents the KochbuchClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IKochbuchClient
    {
        global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation AddRecipeData { get; }

        global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery FetchUnitsList { get; }

        global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery FetchIngredientsList { get; }

        global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery FetchRecipesList { get; }
    }
}

namespace DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class RecipeEntity
    {
        public RecipeEntity(global::System.String name = default !, global::System.Int32 id = default !, global::System.Int32 numberPersons = default !, global::System.Int32 userId = default !, global::System.String cookInstructon = default !, global::System.DateTimeOffset? changeDate = default !, global::System.DateTimeOffset? creationDate = default !, global::System.Boolean deleted = default !)
        {
            Name = name;
            Id = id;
            NumberPersons = numberPersons;
            UserId = userId;
            CookInstructon = cookInstructon;
            ChangeDate = changeDate;
            CreationDate = creationDate;
            Deleted = deleted;
        }

        public global::System.String Name { get; }
        public global::System.Int32 Id { get; }
        public global::System.Int32 NumberPersons { get; }
        public global::System.Int32 UserId { get; }
        public global::System.String CookInstructon { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.Boolean Deleted { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class UnitEntity
    {
        public UnitEntity(global::System.Int32 id = default !, global::System.String name = default !, global::System.DateTimeOffset? creationDate = default !, global::System.DateTimeOffset? changeDate = default !, global::System.Boolean deleted = default !)
        {
            Id = id;
            Name = name;
            CreationDate = creationDate;
            ChangeDate = changeDate;
            Deleted = deleted;
        }

        public global::System.Int32 Id { get; }
        public global::System.String Name { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.Boolean Deleted { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class IngredientEntity
    {
        public IngredientEntity(global::System.Int32 id = default !, global::System.String name = default !, global::System.DateTimeOffset? creationDate = default !, global::System.Boolean deleted = default !, global::System.DateTimeOffset? changeDate = default !, global::System.Int32? recipeId = default !, global::System.Double amount = default !, global::System.Int32? unitId = default !)
        {
            Id = id;
            Name = name;
            CreationDate = creationDate;
            Deleted = deleted;
            ChangeDate = changeDate;
            RecipeId = recipeId;
            Amount = amount;
            UnitId = unitId;
        }

        public global::System.Int32 Id { get; }
        public global::System.String Name { get; }
        public global::System.DateTimeOffset? CreationDate { get; }
        public global::System.Boolean Deleted { get; }
        public global::System.DateTimeOffset? ChangeDate { get; }
        public global::System.Int32? RecipeId { get; }
        public global::System.Double Amount { get; }
        public global::System.Int32? UnitId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.AddRecipeDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, AddRecipeData_AddRecipe_Recipe_Recipe> _addRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper;
        public AddRecipeDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, AddRecipeData_AddRecipe_Recipe_Recipe> addRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper = addRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult);

        public AddRecipeDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddRecipeDataResultInfo info)
            {
                return new AddRecipeDataResult(MapNonNullableIAddRecipeData_AddRecipe(info.AddRecipe, snapshot));
            }

            throw new global::System.ArgumentException("AddRecipeDataResultInfo expected.");
        }

        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe MapNonNullableIAddRecipeData_AddRecipe(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddRecipeData_AddRecipe returnValue = default !;
            if (data.__typename.Equals("AddRecipePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddRecipeData_AddRecipe_AddRecipePayload(MapNonNullableIAddRecipeData_AddRecipe_Recipe(data.Recipe ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeData_AddRecipe_Recipe MapNonNullableIAddRecipeData_AddRecipe_Recipe(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Recipe", global::System.StringComparison.Ordinal))
            {
                return _addRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper.Map(snapshot.GetEntity<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddRecipeDataResultInfo(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipePayloadData addRecipe, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddRecipe = addRecipe;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Adds new recipe data.
        /// </summary>
        public global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipePayloadData AddRecipe { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddRecipeDataResultInfo(AddRecipe, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper : global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, AddRecipeData_AddRecipe_Recipe_Recipe>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddRecipeData_AddRecipe_Recipe_Recipe Map(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddRecipeData_AddRecipe_Recipe_Recipe(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchUnitsListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity, FetchUnitsList_Units_Unit> _fetchUnitsList_Units_UnitFromUnitEntityMapper;
        public FetchUnitsListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity, FetchUnitsList_Units_Unit> fetchUnitsList_Units_UnitFromUnitEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchUnitsList_Units_UnitFromUnitEntityMapper = fetchUnitsList_Units_UnitFromUnitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchUnitsList_Units_UnitFromUnitEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult);

        public FetchUnitsListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchUnitsListResultInfo info)
            {
                return new FetchUnitsListResult(MapNonNullableIFetchUnitsList_UnitsNonNullableArray(info.Units, snapshot));
            }

            throw new global::System.ArgumentException("FetchUnitsListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsList_Units> MapNonNullableIFetchUnitsList_UnitsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var units = new global::System.Collections.Generic.List<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsList_Units>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                units.Add(MapNonNullableIFetchUnitsList_Units(child, snapshot));
            }

            return units;
        }

        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsList_Units MapNonNullableIFetchUnitsList_Units(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Unit", global::System.StringComparison.Ordinal))
            {
                return _fetchUnitsList_Units_UnitFromUnitEntityMapper.Map(snapshot.GetEntity<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchUnitsListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> units, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Units = units;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets all units.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Units { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchUnitsListResultInfo(Units, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsList_Units_UnitFromUnitEntityMapper : global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity, FetchUnitsList_Units_Unit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchUnitsList_Units_UnitFromUnitEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FetchUnitsList_Units_Unit Map(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchUnitsList_Units_Unit(entity.Id, entity.Name, entity.CreationDate, entity.ChangeDate, entity.Deleted);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchIngredientsListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity, FetchIngredientsList_Ingredients_Ingredient> _fetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper;
        public FetchIngredientsListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity, FetchIngredientsList_Ingredients_Ingredient> fetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper = fetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult);

        public FetchIngredientsListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchIngredientsListResultInfo info)
            {
                return new FetchIngredientsListResult(MapNonNullableIFetchIngredientsList_IngredientsNonNullableArray(info.Ingredients, snapshot));
            }

            throw new global::System.ArgumentException("FetchIngredientsListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsList_Ingredients> MapNonNullableIFetchIngredientsList_IngredientsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var ingredients = new global::System.Collections.Generic.List<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsList_Ingredients>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                ingredients.Add(MapNonNullableIFetchIngredientsList_Ingredients(child, snapshot));
            }

            return ingredients;
        }

        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsList_Ingredients MapNonNullableIFetchIngredientsList_Ingredients(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Ingredient", global::System.StringComparison.Ordinal))
            {
                return _fetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper.Map(snapshot.GetEntity<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchIngredientsListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> ingredients, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Ingredients = ingredients;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets all ingredients.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Ingredients { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchIngredientsListResultInfo(Ingredients, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper : global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity, FetchIngredientsList_Ingredients_Ingredient>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FetchIngredientsList_Ingredients_Ingredient Map(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchIngredientsList_Ingredients_Ingredient(entity.Id, entity.Name, entity.CreationDate, entity.Deleted, entity.ChangeDate, entity.RecipeId, entity.Amount, entity.UnitId);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchRecipesListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, FetchRecipesList_Recipes_Recipe> _fetchRecipesList_Recipes_RecipeFromRecipeEntityMapper;
        public FetchRecipesListResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, FetchRecipesList_Recipes_Recipe> fetchRecipesList_Recipes_RecipeFromRecipeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fetchRecipesList_Recipes_RecipeFromRecipeEntityMapper = fetchRecipesList_Recipes_RecipeFromRecipeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fetchRecipesList_Recipes_RecipeFromRecipeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult);

        public FetchRecipesListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchRecipesListResultInfo info)
            {
                return new FetchRecipesListResult(MapNonNullableIFetchRecipesList_RecipesNonNullableArray(info.Recipes, snapshot));
            }

            throw new global::System.ArgumentException("FetchRecipesListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesList_Recipes> MapNonNullableIFetchRecipesList_RecipesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var recipes = new global::System.Collections.Generic.List<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesList_Recipes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                recipes.Add(MapNonNullableIFetchRecipesList_Recipes(child, snapshot));
            }

            return recipes;
        }

        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesList_Recipes MapNonNullableIFetchRecipesList_Recipes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Recipe", global::System.StringComparison.Ordinal))
            {
                return _fetchRecipesList_Recipes_RecipeFromRecipeEntityMapper.Map(snapshot.GetEntity<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchRecipesListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> recipes, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Recipes = recipes;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets all recipes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Recipes { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchRecipesListResultInfo(Recipes, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesList_Recipes_RecipeFromRecipeEntityMapper : global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, FetchRecipesList_Recipes_Recipe>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchRecipesList_Recipes_RecipeFromRecipeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FetchRecipesList_Recipes_Recipe Map(global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FetchRecipesList_Recipes_Recipe(entity.Id, entity.NumberPersons, entity.Name, entity.UserId, entity.CookInstructon, entity.ChangeDate, entity.CreationDate, entity.Deleted);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IRecipeInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNumberPersonsSet { get; }

        global::System.Boolean IsUserIdSet { get; }

        global::System.Boolean IsCookInstructonSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsChangeDateSet { get; }

        global::System.Boolean IsCreationDateSet { get; }

        global::System.Boolean IsDeletedSet { get; }

        global::System.Boolean IsIngredientsSet { get; }

        global::System.Boolean IsRecipeImagesSet { get; }

        global::System.Boolean IsUserSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IIngredientInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsAmountSet { get; }

        global::System.Boolean IsUnitIdSet { get; }

        global::System.Boolean IsRecipeIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsChangeDateSet { get; }

        global::System.Boolean IsCreationDateSet { get; }

        global::System.Boolean IsDeletedSet { get; }

        global::System.Boolean IsRecipeSet { get; }

        global::System.Boolean IsUnitSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IUnitInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsChangeDateSet { get; }

        global::System.Boolean IsCreationDateSet { get; }

        global::System.Boolean IsDeletedSet { get; }

        global::System.Boolean IsIngredientsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IRecipeImageInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsImageSet { get; }

        global::System.Boolean IsRecipeIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsChangeDateSet { get; }

        global::System.Boolean IsCreationDateSet { get; }

        global::System.Boolean IsDeletedSet { get; }

        global::System.Boolean IsRecipeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IUserInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsGoogleIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsChangeDateSet { get; }

        global::System.Boolean IsCreationDateSet { get; }

        global::System.Boolean IsDeletedSet { get; }

        global::System.Boolean IsRecipesSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipeDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Byte, global::System.Byte> _byteParser;
        public AddRecipeDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _byteParser = serializerResolver.GetLeafValueParser<global::System.Byte, global::System.Byte>("Byte") ?? throw new global::System.ArgumentException("No serializer for type `Byte` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddRecipeDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddRecipeDataResult Result, AddRecipeDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IAddRecipeDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddRecipeDataResult, AddRecipeDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipePayloadData addRecipeId = default !;
            _entityStore.Update(session =>
            {
                addRecipeId = DeserializeNonNullableIAddRecipeData_AddRecipe(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addRecipe"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddRecipeDataResultInfo(addRecipeId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipePayloadData DeserializeNonNullableIAddRecipeData_AddRecipe(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddRecipePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipePayloadData(typename, recipe: UpdateNonNullableIAddRecipeData_AddRecipe_RecipeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recipe"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIAddRecipeData_AddRecipe_RecipeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Recipe", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity? entity))
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Id, entity.NumberPersons, entity.UserId, entity.CookInstructon, entity.ChangeDate, entity.CreationDate, entity.Deleted));
                }
                else
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchUnitsListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public FetchUnitsListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchUnitsListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchUnitsListResult Result, FetchUnitsListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchUnitsListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchUnitsListResult, FetchUnitsListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> unitsId = default !;
            _entityStore.Update(session =>
            {
                unitsId = UpdateNonNullableIFetchUnitsList_UnitsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "units"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchUnitsListResultInfo(unitsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIFetchUnitsList_UnitsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var units = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                units.Add(UpdateNonNullableIFetchUnitsList_UnitsEntity(session, child, entityIds));
            }

            return units;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIFetchUnitsList_UnitsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Unit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity? entity))
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationDate")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDate")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationDate")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDate")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchIngredientsListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public FetchIngredientsListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchIngredientsListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchIngredientsListResult Result, FetchIngredientsListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchIngredientsListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchIngredientsListResult, FetchIngredientsListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> ingredientsId = default !;
            _entityStore.Update(session =>
            {
                ingredientsId = UpdateNonNullableIFetchIngredientsList_IngredientsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ingredients"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchIngredientsListResultInfo(ingredientsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIFetchIngredientsList_IngredientsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var ingredients = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                ingredients.Add(UpdateNonNullableIFetchIngredientsList_IngredientsEntity(session, child, entityIds));
            }

            return ingredients;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIFetchIngredientsList_IngredientsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Ingredient", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity? entity))
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationDate")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recipeId")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "unitId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationDate")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recipeId")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "unitId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchRecipesListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public FetchRecipesListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchRecipesListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchRecipesListResult Result, FetchRecipesListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchRecipesListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchRecipesListResult, FetchRecipesListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> recipesId = default !;
            _entityStore.Update(session =>
            {
                recipesId = UpdateNonNullableIFetchRecipesList_RecipesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recipes"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchRecipesListResultInfo(recipesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIFetchRecipesList_RecipesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var recipes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                recipes.Add(UpdateNonNullableIFetchRecipesList_RecipesEntity(session, child, entityIds));
            }

            return recipes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIFetchRecipesList_RecipesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Recipe", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity? entity))
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numberPersons")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cookInstructon")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDate")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationDate")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numberPersons")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cookInstructon")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDate")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creationDate")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddRecipePayloadData
    {
        public AddRecipePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? recipe = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Recipe = recipe;
        }

        public global::System.String __typename { get; }
        public global::StrawberryShake.EntityId? Recipe { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class KochbuchClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Recipe" => ParseRecipeEntityId(obj, __typename),
                "Unit" => ParseUnitEntityId(obj, __typename),
                "Ingredient" => ParseIngredientEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Recipe" => FormatRecipeEntityId(entityId),
                "Unit" => FormatUnitEntityId(entityId),
                "Ingredient" => FormatIngredientEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseRecipeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatRecipeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnitEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUnitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseIngredientEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatIngredientEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class KochbuchClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public KochbuchClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public static partial class KochbuchClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.KochbuchClientStoreAccessor> AddKochbuchClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.KochbuchClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.AddRecipeDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchUnitsListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchIngredientsListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchRecipesListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.KochbuchClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IKochbuchClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.KochbuchClientStoreAccessor>("KochbuchClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("KochbuchClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.AddRecipeData_AddRecipe_Recipe_Recipe>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipeData_AddRecipe_Recipe_RecipeFromRecipeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.UnitEntity, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchUnitsList_Units_Unit>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchUnitsList_Units_UnitFromUnitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.IngredientEntity, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchIngredientsList_Ingredients_Ingredient>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchIngredientsList_Ingredients_IngredientFromIngredientEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.RecipeEntity, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchRecipesList_Recipes_Recipe>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchRecipesList_Recipes_RecipeFromRecipeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IngredientInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UnitInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.RecipeImageInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.UserInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipeDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.AddRecipeDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.AddRecipeDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IAddRecipeDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.AddRecipeDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchUnitsListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchUnitsListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchUnitsListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchUnitsListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchUnitsListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchIngredientsListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchIngredientsListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchIngredientsListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchIngredientsListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchIngredientsListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchRecipesListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.FetchRecipesListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchRecipesListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IFetchRecipesListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.FetchRecipesListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.State.KochbuchClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.KochbuchClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.IKochbuchClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DA.Kochbuch.Blazor.Client.GraphQLAPIClient.KochbuchClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
